remain = allsegment_fasta[[1]][[i]][temp > thredshold]
print(1)
for(i in 1:length(allsegment_fasta[[1]])){
temp = sapply(allsegment_fasta[[1]][[i]],nchar)
thredshold = nchar(allsegment_fasta[[1]][[i]][which.max(temp)])*0.8
print('Max_length:')
print(as.character(nchar(allsegment_fasta[[1]][[i]][which.max(temp)])))
print('Thredshold:')
print(thredshold)
remain = allsegment_fasta[[1]][[i]][temp > thredshold]
remain <- sapply(allsegment_fasta[[1]][[i]],list)
name <- paste0(names(allsegment_fasta[[1]])[i],1:length(allsegment_fasta[[1]][[i]]))
write.fasta(remain,name,paste0(names(allsegment_fasta[[1]])[i],'.fasta'))
}
for(i in 1:length(allsegment_fasta[[1]])){
temp = sapply(allsegment_fasta[[1]][[i]],nchar)
thredshold = nchar(allsegment_fasta[[1]][[i]][which.max(temp)])*0.8
print('-----------------------------------')
print(names(allsegment_fasta[[1]])[i])
print('Max_length:')
print(nchar(allsegment_fasta[[1]][[i]][which.max(temp)]))
print('Thredshold:')
print(thredshold)
print('-----------------------------------')
remain = allsegment_fasta[[1]][[i]][temp > thredshold]
remain <- sapply(allsegment_fasta[[1]][[i]],list)
name <- paste0(names(allsegment_fasta[[1]])[i],1:length(allsegment_fasta[[1]][[i]]))
write.fasta(remain,name,paste0(names(allsegment_fasta[[1]])[i],'.fasta'))
}
temp = sapply(allsegment_fasta[[1]][[i]],nchar)
median(temp)
i =1
temp = sapply(allsegmetn_fasta[[1]][[i]],nchar)
temp = sapply(allsegmetn_fasta[[1]][[i]],nchar)
median(temp)
i = 1
temp = sapply(allsegmetn_fasta[[1]][[i]],nchar)
length(allsegment_fasta[[1]][[1]])
temp = sapply(allsegmetn_fasta[[1]][[i]],nchar)
allsegmetn_fasta[[1]][[i]]
temp = sapply(allsegment_fasta[[1]][[i]],nchar)
median(temp)
i = 2
temp = sapply(allsegment_fasta[[1]][[i]],nchar)
median(temp)
print(paste0('Thredshold:',1))
for(i in 1:length(allsegment_fasta[[1]])){
temp = sapply(allsegment_fasta[[1]][[i]],nchar)
thredshold = median(temp)*0.8
print('-----------------------------------')
print(names(allsegment_fasta[[1]])[i])
print(paste0('Median_length:',nchar(allsegment_fasta[[1]][[i]][which.max(temp)])))
print(paste0('Thredshold:',thredshold))
print('-----------------------------------')
remain = allsegment_fasta[[1]][[i]][temp > thredshold]
remain <- sapply(allsegment_fasta[[1]][[i]],list)
name <- paste0(names(allsegment_fasta[[1]])[i],1:length(allsegment_fasta[[1]][[i]]))
write.fasta(remain,name,paste0(names(allsegment_fasta[[1]])[i],'.fasta'))
}
setwd("~/")
for(i in 1:length(allsegment_fasta[[1]])){
temp = sapply(allsegment_fasta[[1]][[i]],nchar)
#thredshold = median(temp)*0.8
thredshold = 0
print('-----------------------------------')
print(names(allsegment_fasta[[1]])[i])
print(paste0('Median_length:',nchar(allsegment_fasta[[1]][[i]][which.max(temp)])))
print(paste0('Thredshold:',thredshold))
print('-----------------------------------')
remain = allsegment_fasta[[1]][[i]][temp > thredshold]
remain <- sapply(allsegment_fasta[[1]][[i]],list)
#save as fasta file
name <- paste0(names(allsegment_fasta[[1]])[i],1:length(allsegment_fasta[[1]][[i]]))
write.fasta(remain,name,paste0(names(allsegment_fasta[[1]])[i],'.fasta'))
}
dir()
HAdata <- readLines('brisbane_HA_codon_mutant.fasta')
library('seqinr')
HAdata <- read.fasta('brisbane_HA_codon_mutant.fasta')
HAdata[1]
HAdata[[1]]
HAdata[[1]][1]
HAdata[1][1]
length(HAdata[1])
length(HAdata[[1]])
s2c(HAdata[[1]])
c2s(HAdata[[1]])
list <- c(c2s(HAdata[[1]]),c2s(HAdata[[1]]))
list
unique(list)
?unique
list <- c()
length(HAdata)
for(i in 1:length(HAdata)){
list <- c(list,c2s(HAdata[[i]]))
}
unique(list)
uniquelist <-  unique(list)
lengthinfo <- sapply(list, nchar)
lengthinfo[1]
quantile(lengthinfo)
?quantile
quantile(lengthinfo,probs = seq(0, 1, 0.1))
filterlist <- list[[lengthinfo<=1778&lengthinfo>=1773]]
lengthinfo<=1778&lengthinfo>=1773
filterlist <- list[[c(1,2)]]
filterlist <- list[c(1,2)]
filterlist
filterlist <- list[lengthinfo<=1778&lengthinfo>=1773]
length(filterlist)
uniquelist <-  unique(filterlist)
?duplicated
duplicated(filterlist)
duplicatedlist <- filterlist[duplicated(filterlist)]
uniquedup <- unique(duplicatedlist)
quantile(lengthinfo,probs = seq(0, 1, 0.1))
hapsdata <- read.csv('brisbane_HA_codon_mutant')
hapsdata <- read.csv('brisbane_HA_codon_mutant.csv')
str(hapsdata)
?read.csv
hapsdata <- read.csv('brisbane_HA_codon_mutant.csv',stringsAsFactors = F)
str(hapsdata)
hapsdata <- read.csv('brisbane_HA_codon_mutant.csv',stringsAsFactors = F)
str(hapsdata)
hapsdata[,2002]
hapsdata[2002,]
hapsdata <- hapsdata[-2002,]
str(hapsdata)
hapsdata[6,]
hapsdata[7,]
is.na(hapsdata[7,])
hapsdata[7,]$X.A.1077X
hapsdata[7,]==''
all(hapsdata[7,]=='')
any(hapsdata[7,]=='')
any(hapsdata[6,]=='')
TRUE | FALSE
i = 1
logic = any(hapsdata[i,]=='') | any(hapsdata[i,]=='N')
logic
i =7
logic = any(hapsdata[i,]=='') | any(hapsdata[i,]=='N')
logic
logic <- c()
logic <- c()
for(i in 1:length(hapsdata)){
logic = c(logic,(any(hapsdata[i,]=='') | any(hapsdata[i,]=='N')))
}
logic
length(hapsdata)
nrow(hapsdata)
logic <- c()
for(i in 1:nrow(hapsdata)){
logic = c(logic,(any(hapsdata[i,]=='') | any(hapsdata[i,]=='N')))
}
remainpsdata <- hapsdata[logic]
remainpsdata <- hapsdata[logic,]
write.csv(remainpsdata,'remainhapsdata.csv',row.names = F)
remainpsdata <- hapsdata[!logic,]
write.csv(remainpsdata,'remainhapsdata.csv',row.names = F)
sum(remainpsdata[,1])
sum(remainpsdata[1:50,1])
reference <- read.fasta('BR59mut.fasta')
Hareference <- reference[[4]]
Hareference
Hareference[[1]][79]
Hareference[79]
Hareference[185]
names(remainpsdata)
?substr
grep(X.?.,"X.A.79X")
grep('X.?.',"X.A.79X")
grepreg('X.?.',"X.A.79X")
?grep
gregexpr('X.?.',"X.A.79X")
regexpr('X.?.',"X.A.79X")
regexpr('X.?.',"X.A.179X")
regexpr('X.??',"X.A.179X")
regexpr('^X.??',"X.A.179X")
regexpr('^X.',"X.A.179X")
regexpr('^X[.]',"X.A.179X")
regexpr('^X[.].[.]',"X.A.179X")
regexpr('^X[.].[.]',"X.A.79X")
regexpr('[X]',"X.A.79X")
Gregexpr('[X]',"X.A.79X")
gregexpr('[X]',"X.A.79X")
gregexpr('[X]',"X.A.179X")
names(remainpsdata)
names(remainpsdata)[-1]
length(remainpsdata[1,])
length(remainpsdata[2,])
remainpsdata[2,]
remainpsdata[1,]
pos <- names(remainpsdata)[-1]
pos
gregexpr('[X]',pos)
gregexpr('[X]&',colnames)
colnames <- names(remainpsdata)[-1]
gregexpr('[X]&',colnames)
substr(colnames,4,-1)
substr(colnames[1],4,-1)
colnames[1]
substr(colnames[1],4,9)
substr(colnames[1],5,nchar(colnames[1]))
substr(colnames[1],5,(nchar(colnames[1])-1))
colnames
1:length(colnames)
pos <- c()
for(i in 1:length(colnames)){
pos = c(pos,substr(colnames[1],5,(nchar(colnames[1])-1)))
}
pos
pos <- c()
for(i in 1:length(colnames)){
pos = c(pos,substr(colnames[i],5,(nchar(colnames[i])-1)))
}
pos
pos = as.numeric(pos)
pos
Hareference
newseq = Hareference
Hareference[185]
length(pos)
ncol(remainpsdata)
c(Hareference,Hareference)
c(list(Hareference),list(Hareference))
newfasta = list()
newfasta = list()
seqname = c()
for(i in 1:50){
seqname = c(seqname,paste0('CCS_read',remainpsdata[1,i]))
newseq = Hareference
for (j in 1:length(pos)){
newseq[pos[j]] = tolower(remainpsdata[j+1,i])
}
newfasta = c(newfasta,list(newseq))
}
newfasta = list()
seqname = c()
for(i in 1:50){
seqname = c(seqname,paste0('CCS_read',remainpsdata[i,1]))
newseq = Hareference
for (j in 1:length(pos)){
newseq[pos[j]] = tolower(remainpsdata[i,j+1])
}
newfasta = c(newfasta,list(newseq))
}
newfasta
seqname
newfasta = list()
seqname = c()
for(i in 1:50){
seqname = c(seqname,paste0('CCS_read_',remainpsdata[i,1]))
newseq = Hareference
for (j in 1:length(pos)){
newseq[pos[j]] = tolower(remainpsdata[i,j+1])
}
newfasta = c(newfasta,list(newseq))
}
seqname
write.fasta(newfasta,seqname,'HAPSccs.fasta')
177*0.9
159.3+586
461+170
library("Biostrings")
library('seqinr')
data <- readLines('C:/Users/Haogao/Desktop/BR59mut.fasta')
data <- readLines('C:/Users/Haogao/Desktop/BR59mut.fasta')
segmentname = substr('minor_variants_brisbane_NS1_codon_mutant.csv',16,nchar('minor_variants_brisbane_NS1_codon_mutant.csv')-4)
name <- paste0('>',substr('minor_variants_brisbane_NS1_codon_mutant.csv',16,nchar('minor_variants_brisbane_NS1_codon_mutant.csv')-4))
line = which(name == data)
length(grep('>',data))>1
data <- data[(line+1):((grep('>',data)[which(line == grep('>',data))+1])-1)]
which(line == grep('>',data))
((grep('>',data)[which(line == grep('>',data))+1])-1)
grep('>',data)
which(line == grep('>',data))+1
line
grep('>',data)
which(line == grep('>',data))
grep('>',data)
data <- data[(line+1):((grep('>',data)[which(line == grep('>',data))])-1)]
data
line+1
data <- readLines('C:/Users/Haogao/Desktop/BR59mut.fasta')
data
which(line == grep('>',data))
grep('>',data
(grep('>',data)
)
which(line == grep('>',data))
length(data)
data <- data[(line+1):length(data)]
data
library('seqinr')
??seqinr
lseqinr()
syncodons('tag')
region1_b - region1_a + 1
region1_a = 8508
region1_b = 8517
region2_a = 11581
region2_b = 11590
vrna1 = 'UGUGAAUGUG'
vrna2 = 'CACAUUCACA'
region1_b - region1_a + 1
nchar(vrna1)
nchar(vrna1) == region1_b - region1_a + 1
2280-1+1
2280/3
?rev
rev(vrna1)
rev(s2c(vrna1))
vrna1 = s2c('UGUGAAUGUG')
vrna2 = s2c('CACAUUCACA')
rev(vrna1)
syncodons('uag')
library('Biostrings')
Biostrings
?translate
?transcribe
??transcribe
?cdna
?dna2rna
cDNA
library(RCurl)
install.packages('Rcurl')
install.packages('RCurl')
library(bitops)
getURL(https://www.iplocation.net/find-ip-address)
getURL('https://www.iplocation.net/find-ip-address')
library(RCurl)
library(bitops)
getURL('https://www.iplocation.net/find-ip-address')
getURL('http://www.whatsmyip.org/')
getURL('http://www.whatsmyip.org/')
getURL('http://www.myipaddress.com/show-my-ip-address/')
?getURI
getURI('http://www.myipaddress.com/show-my-ip-address/')
getURLContent('http://www.myipaddress.com/show-my-ip-address/')
getURL('http://www.myipaddress.com')
readLines('http://www.myipaddress.com')
readLines('http://www.myipaddress.com')[62]
ipadd <- readLines('http://www.myipaddress.com')[62]
substr(ipadd,7,18)
ipadd = substr(ipadd,7,18)
install.packages("mailR")
library(mailR)
send.mail(from = "koohoko@gmail.com",
to = c("hggu@connect.hku.hk"),
subject = "IP address of office computer",
body = ipadd,
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "koohoko", passwd = "adidasnike14", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
version()
r
29/75
25/87
35/87
14/78
13/89
215-171
314-208
44/106
source("https://bioconductor.org/biocLite.R")
biocLite("Rsamtools")
dir()
data = read.csv('bmi_peer.csv')
install.packages("infotheo")
library(infotheo)
?mutinformation
a = c(1,1,1,1,2)
b= c(2,2,2,2,1)
mutinformation(a,b)
mutinformation(a,a)
mutinformation(b,a)
a = c(1,1,1,1,1)
mutinformation(b,a)
b= c(2,2,2,2,2)
mutinformation(b,a)
?tabulate
b= c(2,2,2,2,1)
tabulate(b)
data(USArrests)
USArrests
discretize(USArrests)
?discretize
discretize(USArrests,'equalwidth')
discretize(USArrests,'equalfreq')
discretize(USArrests,'equalfreq',4)
a= c('a','t','c','g','a')
discretize(a)
discretize(a,4)
discretize(a,'globalequalwidth')
discretize(a,'equalfreq')
install.packages("entropy")
library(entropy)
?discretize
a = ('a','a','a','t')
b = c('u','u','u','t')
a = c('a','a','a','t')
discretize2d(a,b)
discretize2d(a,b,2,2)
nt = c('a','t','c','g')
sample(nt,1000)
sample(nt,1000,replace = T)
a = sample(nt,1000,replace = T)
b = sample(nt,1000,replace = T)
discretize2d(a,b,2,2)
discretize2d(a,b,4,4)
range(a)
range(b)
a
range(b)
c= a
range(c)
d = sample(nt,1000,replace = T)
range(d)
range(nt)
hist(a)
as.numeric(a)
as.factor(a)
range(a)
range(as.factor(a))
as.numeric(as.factor(a))
discretize2d(as.numeric(as.factor(a)),as.numeric(as.factor(b)))
discretize2d(as.numeric(as.factor(a)),as.numeric(as.factor(b)),4,4)
discretize(as.numeric(as.factor(a)))
discretize(as.numeric(as.factor(a)),4)
as.numeric(as.factor(a))
a
y2d = discretize2d(as.numeric(as.factor(a)),as.numeric(as.factor(b)),4,4)
mi.empirical(y2d)
?mi.Dirichlet
entropy(y2d)
entropy(rowSums(y2d))
316+70-78+20-30-80-3
dirlist = list.dirs()[2:7]
install.packages("rbamtools")
setwd('c:/Users/Haogao/Google Drive/work/2017Sem3/2017-10-19_Pacbio_Phasing/')
library(rbamtools)
setwd('c:/Users/Haogao/Google Drive/work/2017Sem3/2017-10-19_Pacbio_Phasing/')
bmut = bamReader('bmut6.bam')
reader = bamReader('bmut6.bam')
bamSort(reader, prefix="my_sorted",byName=FALSE, maxmem=1e+9)
createIndex(reader)
bamSort(reader, byName=FALSE, maxmem=1e+9)
bamSort(reader, prefix="my_sorted",byName=FALSE, maxmem=1e+9)
createIndex(reader)
reader = bamReader('bmut6.bam')
bamSort(reader, prefix="my_sorted",byName=FALSE, maxmem=1e+9)
createIndex(reader,idx_filename="my_sorted.bai")
idx <- system.file("extdata", "my_sorted.bai", package="rbamtools")
loadIndex(reader, idx)
loadIndex(reader, 'my_sorted.bai')
indexInitialized(reader)
getRefData(reader)
header <- getHeader(reader)
header
htxt <- getHeaderText(header)
htxt
header <- getHeader(reader)
htxt <- getHeaderText(header)
align <- getNextAlign(reader)
name(align)
align
align <- getNextAlign(reader)
name(align)
header <- getHeader(reader)
header
align
?rewind
library(Rsamtools)
setwd('c:/Users/Haogao/Google Drive/work/2017Sem3/2017-10-19_Pacbio_Phasing/')
readBAM <- function(bamFile){
bam <- scanBam(bamFile)
# A function for collapsing the list of lists into a single list
# as per the Rsamtools vignette
.unlist <- function (x){
x1 <- x[[1L]]
if (is.factor(x1)){
structure(unlist(x), class = "factor", levels = levels(x1))
} else {
do.call(c, x)
}
}
bam_field <- names(bam[[1]])
list <- lapply(bam_field, function(y) .unlist(lapply(bam, "[[", y)))
bam_df <- do.call("DataFrame", list)
names(bam_df) <- bam_field
#return a list that can be called as a data frame
return(bam_df)
}
bam1 <- readBAM(bamFile)
bmut6 <- readBAM('bmut6.bam')
bmut6@listData$cigar
table(bmut6@listData$cigar)
?table
as.numeric(table(bmut6@listData$cigar))
bmut6@listData$cigar[7]
bmut6@listData$strand
bmut6@listData$seq
bmut6@listData$seq[1]
bmut6@listData$cigar[1]
bmut6@metadata
bmut6@listData$seq[1][1]
bmut6@listData$seq[[1]]
bmut6@listData$seq[[1]][1]
bmut6@listData$seq[[1]][1:57]
bmut6@listData$seq[[1]][58:78]
bmut6@listData$cigar[7]
